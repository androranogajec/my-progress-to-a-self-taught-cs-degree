Profiling quicksort:
Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB          11       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          11       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          19       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          19       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          13   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           7           return array
    28     21.4 MiB      0.0 MiB           6       pivot = array[0]
    29     21.4 MiB      0.0 MiB          44       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          44       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           6       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB           9       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           9       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          15       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          15       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           9   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           5           return array
    28     21.4 MiB      0.0 MiB           4       pivot = array[0]
    29     21.4 MiB      0.0 MiB          22       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          22       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           4       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          11   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          11       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           6           return array
    28     21.4 MiB      0.0 MiB           5       pivot = array[0]
    29     21.4 MiB      0.0 MiB          30       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          30       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           5       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          13   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           7           return array
    28     21.4 MiB      0.0 MiB           6       pivot = array[0]
    29     21.4 MiB      0.0 MiB          40       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          40       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           6       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB          11       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          11       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          18       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          18       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           9   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           5           return array
    28     21.4 MiB      0.0 MiB           4       pivot = array[0]
    29     21.4 MiB      0.0 MiB          27       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          27       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           4       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB           9       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           9       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          16       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          16       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          11   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          11       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           6           return array
    28     21.4 MiB      0.0 MiB           5       pivot = array[0]
    29     21.4 MiB      0.0 MiB          30       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          30       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           5       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB          10       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          10       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          17       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          17       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           9   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           5           return array
    28     21.4 MiB      0.0 MiB           4       pivot = array[0]
    29     21.4 MiB      0.0 MiB          26       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          26       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           4       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          21   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          21       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          11           return array
    28     21.4 MiB      0.0 MiB          10       pivot = array[0]
    29     21.4 MiB      0.0 MiB          74       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          74       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          10       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          23   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          23       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          12           return array
    28     21.4 MiB      0.0 MiB          11       pivot = array[0]
    29     21.4 MiB      0.0 MiB          93       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          93       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          11       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          33   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          33       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          17           return array
    28     21.4 MiB      0.0 MiB          16       pivot = array[0]
    29     21.4 MiB      0.0 MiB         147       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         147       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          16       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          47   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          47       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          24           return array
    28     21.4 MiB      0.0 MiB          23       pivot = array[0]
    29     21.4 MiB      0.0 MiB         223       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         223       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          23       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB          11       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          11       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          15       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          15       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB          12       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          12       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          20       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          20       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB           9       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           9       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          13   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           7           return array
    28     21.4 MiB      0.0 MiB           6       pivot = array[0]
    29     21.4 MiB      0.0 MiB          41       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          41       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           6       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB           9       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           9       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          19   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          19       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          10           return array
    28     21.4 MiB      0.0 MiB           9       pivot = array[0]
    29     21.4 MiB      0.0 MiB          66       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          66       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           9       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          27   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          27       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          14           return array
    28     21.4 MiB      0.0 MiB          13       pivot = array[0]
    29     21.4 MiB      0.0 MiB         103       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         103       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          13       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          33   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          33       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          17           return array
    28     21.4 MiB      0.0 MiB          16       pivot = array[0]
    29     21.4 MiB      0.0 MiB         141       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         141       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          16       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          81   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          81       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          41           return array
    28     21.4 MiB      0.0 MiB          40       pivot = array[0]
    29     21.4 MiB      0.0 MiB         426       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         426       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          40       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          95   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          95       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          48           return array
    28     21.4 MiB      0.0 MiB          47       pivot = array[0]
    29     21.4 MiB      0.0 MiB         545       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         545       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          47       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           5   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           3           return array
    28     21.4 MiB      0.0 MiB           2       pivot = array[0]
    29     21.4 MiB      0.0 MiB          10       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          10       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           2       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           7   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           4           return array
    28     21.4 MiB      0.0 MiB           3       pivot = array[0]
    29     21.4 MiB      0.0 MiB          17       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          17       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           3       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           4       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           4       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          11   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          11       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           6           return array
    28     21.4 MiB      0.0 MiB           5       pivot = array[0]
    29     21.4 MiB      0.0 MiB          31       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          31       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           5       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          13   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           7           return array
    28     21.4 MiB      0.0 MiB           6       pivot = array[0]
    29     21.4 MiB      0.0 MiB          43       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          43       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           6       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           1   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           1           return array
    28                                             pivot = array[0]
    29                                             left = [i for i in array[1:] if i < pivot]
    30                                             right = [i for i in array[1:] if i >= pivot]
    31                                             return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB           3   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           2           return array
    28     21.4 MiB      0.0 MiB           1       pivot = array[0]
    29     21.4 MiB      0.0 MiB           5       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB           5       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           1       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          17   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          17       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB           9           return array
    28     21.4 MiB      0.0 MiB           8       pivot = array[0]
    29     21.4 MiB      0.0 MiB          64       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          64       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           8       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB          19   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB          19       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          10           return array
    28     21.4 MiB      0.0 MiB           9       pivot = array[0]
    29     21.4 MiB      0.0 MiB          82       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB          82       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB           9       return quicksort(left) + [pivot] + quicksort(right)


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    24     21.4 MiB     21.4 MiB         115   @profile
    25                                         def quicksort(array):
    26     21.4 MiB      0.0 MiB         115       if len(array) <= 1:
    27     21.4 MiB      0.0 MiB          58           return array
    28     21.4 MiB      0.0 MiB          57       pivot = array[0]
    29     21.4 MiB      0.0 MiB         719       left = [i for i in array[1:] if i < pivot]
    30     21.4 MiB      0.0 MiB         719       right = [i for i in array[1:] if i >= pivot]
    31     21.4 MiB      0.0 MiB          57       return quicksort(left) + [pivot] + quicksort(right)


Profiling quicksort_inplace:
Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB           9       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           6           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           2               j += 1
    47     21.4 MiB      0.0 MiB           2               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          13   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          13       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          13       if low >= high:
    40     21.4 MiB      0.0 MiB           7           return array
    41                                         
    42     21.4 MiB      0.0 MiB           6       pivot = array[high]
    43     21.4 MiB      0.0 MiB           6       j = low-1
    44     21.4 MiB      0.0 MiB          25       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          19           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           7               j += 1
    47     21.4 MiB      0.0 MiB           7               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           6       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           6       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          17   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          17       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          17       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          17       if low >= high:
    40     21.4 MiB      0.0 MiB           9           return array
    41                                         
    42     21.4 MiB      0.0 MiB           8       pivot = array[high]
    43     21.4 MiB      0.0 MiB           8       j = low-1
    44     21.4 MiB      0.0 MiB          42       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          34           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          18               j += 1
    47     21.4 MiB      0.0 MiB          18               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           8       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           8       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           8       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           8       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           5       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           3           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           3               j += 1
    47     21.4 MiB      0.0 MiB           3               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB           9       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           6           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           6               j += 1
    47     21.4 MiB      0.0 MiB           6               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          25   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          25       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          25       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          25       if low >= high:
    40     21.4 MiB      0.0 MiB          13           return array
    41                                         
    42     21.4 MiB      0.0 MiB          12       pivot = array[high]
    43     21.4 MiB      0.0 MiB          12       j = low-1
    44     21.4 MiB      0.0 MiB          70       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          58           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          38               j += 1
    47     21.4 MiB      0.0 MiB          38               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          12       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          12       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          12       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          12       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          29   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          29       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          29       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          29       if low >= high:
    40     21.4 MiB      0.0 MiB          15           return array
    41                                         
    42     21.4 MiB      0.0 MiB          14       pivot = array[high]
    43     21.4 MiB      0.0 MiB          14       j = low-1
    44     21.4 MiB      0.0 MiB          94       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          80           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          41               j += 1
    47     21.4 MiB      0.0 MiB          41               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          14       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          14       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          14       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          14       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           7       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           5           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           4               j += 1
    47     21.4 MiB      0.0 MiB           4               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          35   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          35       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          35       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          35       if low >= high:
    40     21.4 MiB      0.0 MiB          18           return array
    41                                         
    42     21.4 MiB      0.0 MiB          17       pivot = array[high]
    43     21.4 MiB      0.0 MiB          17       j = low-1
    44     21.4 MiB      0.0 MiB         128       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         111           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          67               j += 1
    47     21.4 MiB      0.0 MiB          67               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          17       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          17       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          17       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          17       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           8       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           6           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           2               j += 1
    47     21.4 MiB      0.0 MiB           2               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          15       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          12           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           3               j += 1
    47     21.4 MiB      0.0 MiB           3               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          24       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          20           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           4               j += 1
    47     21.4 MiB      0.0 MiB           4               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          13   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          13       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          13       if low >= high:
    40     21.4 MiB      0.0 MiB           7           return array
    41                                         
    42     21.4 MiB      0.0 MiB           6       pivot = array[high]
    43     21.4 MiB      0.0 MiB           6       j = low-1
    44     21.4 MiB      0.0 MiB          38       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          32           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          14               j += 1
    47     21.4 MiB      0.0 MiB          14               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           6       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           6       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          15   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          15       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          15       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          15       if low >= high:
    40     21.4 MiB      0.0 MiB           8           return array
    41                                         
    42     21.4 MiB      0.0 MiB           7       pivot = array[high]
    43     21.4 MiB      0.0 MiB           7       j = low-1
    44     21.4 MiB      0.0 MiB          52       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          45           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          15               j += 1
    47     21.4 MiB      0.0 MiB          15               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           7       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           7       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           7       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           7       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          19   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          19       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          19       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          19       if low >= high:
    40     21.4 MiB      0.0 MiB          10           return array
    41                                         
    42     21.4 MiB      0.0 MiB           9       pivot = array[high]
    43     21.4 MiB      0.0 MiB           9       j = low-1
    44     21.4 MiB      0.0 MiB          71       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          62           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          18               j += 1
    47     21.4 MiB      0.0 MiB          18               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           9       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           9       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           9       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           9       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           5       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           3           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          10       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           7           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           3               j += 1
    47     21.4 MiB      0.0 MiB           3               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           5       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           3           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           3               j += 1
    47     21.4 MiB      0.0 MiB           3               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB           9       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           6           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           6               j += 1
    47     21.4 MiB      0.0 MiB           6               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          11   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          11       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          11       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          11       if low >= high:
    40     21.4 MiB      0.0 MiB           6           return array
    41                                         
    42     21.4 MiB      0.0 MiB           5       pivot = array[high]
    43     21.4 MiB      0.0 MiB           5       j = low-1
    44     21.4 MiB      0.0 MiB          18       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          13           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           9               j += 1
    47     21.4 MiB      0.0 MiB           9               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           5       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           5       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           5       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           5       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           7       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           5           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          13       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          10           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           5               j += 1
    47     21.4 MiB      0.0 MiB           5               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          20       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          16           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          11               j += 1
    47     21.4 MiB      0.0 MiB          11               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          21   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          21       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          21       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          21       if low >= high:
    40     21.4 MiB      0.0 MiB          11           return array
    41                                         
    42     21.4 MiB      0.0 MiB          10       pivot = array[high]
    43     21.4 MiB      0.0 MiB          10       j = low-1
    44     21.4 MiB      0.0 MiB          53       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          43           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          27               j += 1
    47     21.4 MiB      0.0 MiB          27               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          10       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          10       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          10       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          10       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           2               j += 1
    47     21.4 MiB      0.0 MiB           2               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          15       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          11           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           5               j += 1
    47     21.4 MiB      0.0 MiB           5               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          13   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          13       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          13       if low >= high:
    40     21.4 MiB      0.0 MiB           7           return array
    41                                         
    42     21.4 MiB      0.0 MiB           6       pivot = array[high]
    43     21.4 MiB      0.0 MiB           6       j = low-1
    44     21.4 MiB      0.0 MiB          29       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          23           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          13               j += 1
    47     21.4 MiB      0.0 MiB          13               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           6       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           6       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          11       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           8           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           3               j += 1
    47     21.4 MiB      0.0 MiB           3               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          13   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          13       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          13       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          13       if low >= high:
    40     21.4 MiB      0.0 MiB           7           return array
    41                                         
    42     21.4 MiB      0.0 MiB           6       pivot = array[high]
    43     21.4 MiB      0.0 MiB           6       j = low-1
    44     21.4 MiB      0.0 MiB          27       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          21           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           9               j += 1
    47     21.4 MiB      0.0 MiB           9               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           6       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           6       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           6       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          27   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          27       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          27       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          27       if low >= high:
    40     21.4 MiB      0.0 MiB          14           return array
    41                                         
    42     21.4 MiB      0.0 MiB          13       pivot = array[high]
    43     21.4 MiB      0.0 MiB          13       j = low-1
    44     21.4 MiB      0.0 MiB          78       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          65           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          33               j += 1
    47     21.4 MiB      0.0 MiB          33               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          13       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          13       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          13       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          13       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           7       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           5           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          16       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          12           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           4               j += 1
    47     21.4 MiB      0.0 MiB           4               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB           9       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           6           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           2               j += 1
    47     21.4 MiB      0.0 MiB           2               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          11       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           8           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           5               j += 1
    47     21.4 MiB      0.0 MiB           5               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          18       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          14           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          10               j += 1
    47     21.4 MiB      0.0 MiB          10               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          17   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          17       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          17       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          17       if low >= high:
    40     21.4 MiB      0.0 MiB           9           return array
    41                                         
    42     21.4 MiB      0.0 MiB           8       pivot = array[high]
    43     21.4 MiB      0.0 MiB           8       j = low-1
    44     21.4 MiB      0.0 MiB          40       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          32           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          17               j += 1
    47     21.4 MiB      0.0 MiB          17               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           8       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           8       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           8       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           8       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          19   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          19       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          19       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          19       if low >= high:
    40     21.4 MiB      0.0 MiB          10           return array
    41                                         
    42     21.4 MiB      0.0 MiB           9       pivot = array[high]
    43     21.4 MiB      0.0 MiB           9       j = low-1
    44     21.4 MiB      0.0 MiB          54       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          45           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          30               j += 1
    47     21.4 MiB      0.0 MiB          30               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           9       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           9       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           9       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           9       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          29   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          29       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          29       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          29       if low >= high:
    40     21.4 MiB      0.0 MiB          15           return array
    41                                         
    42     21.4 MiB      0.0 MiB          14       pivot = array[high]
    43     21.4 MiB      0.0 MiB          14       j = low-1
    44     21.4 MiB      0.0 MiB          92       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          78           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          41               j += 1
    47     21.4 MiB      0.0 MiB          41               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          14       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          14       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          14       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          14       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          57   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          57       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          57       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          57       if low >= high:
    40     21.4 MiB      0.0 MiB          29           return array
    41                                         
    42     21.4 MiB      0.0 MiB          28       pivot = array[high]
    43     21.4 MiB      0.0 MiB          28       j = low-1
    44     21.4 MiB      0.0 MiB         215       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         187           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          96               j += 1
    47     21.4 MiB      0.0 MiB          96               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          28       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          28       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          28       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          28       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          61   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          61       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          61       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          61       if low >= high:
    40     21.4 MiB      0.0 MiB          31           return array
    41                                         
    42     21.4 MiB      0.0 MiB          30       pivot = array[high]
    43     21.4 MiB      0.0 MiB          30       j = low-1
    44     21.4 MiB      0.0 MiB         267       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         237           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         142               j += 1
    47     21.4 MiB      0.0 MiB         142               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          30       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          30       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          30       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          30       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          65   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          65       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          65       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          65       if low >= high:
    40     21.4 MiB      0.0 MiB          33           return array
    41                                         
    42     21.4 MiB      0.0 MiB          32       pivot = array[high]
    43     21.4 MiB      0.0 MiB          32       j = low-1
    44     21.4 MiB      0.0 MiB         321       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         289           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         192               j += 1
    47     21.4 MiB      0.0 MiB         192               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          32       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          32       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          32       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          32       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          87   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          87       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          87       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          87       if low >= high:
    40     21.4 MiB      0.0 MiB          44           return array
    41                                         
    42     21.4 MiB      0.0 MiB          43       pivot = array[high]
    43     21.4 MiB      0.0 MiB          43       j = low-1
    44     21.4 MiB      0.0 MiB         442       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         399           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         234               j += 1
    47     21.4 MiB      0.0 MiB         234               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          43       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          43       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          43       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          43       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          91   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          91       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          91       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          91       if low >= high:
    40     21.4 MiB      0.0 MiB          46           return array
    41                                         
    42     21.4 MiB      0.0 MiB          45       pivot = array[high]
    43     21.4 MiB      0.0 MiB          45       j = low-1
    44     21.4 MiB      0.0 MiB         515       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         470           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         302               j += 1
    47     21.4 MiB      0.0 MiB         302               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          45       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          45       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          45       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          45       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          99   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          99       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          99       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          99       if low >= high:
    40     21.4 MiB      0.0 MiB          50           return array
    41                                         
    42     21.4 MiB      0.0 MiB          49       pivot = array[high]
    43     21.4 MiB      0.0 MiB          49       j = low-1
    44     21.4 MiB      0.0 MiB         602       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         553           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         310               j += 1
    47     21.4 MiB      0.0 MiB         310               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          49       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          49       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          49       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          49       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           3       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           2           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           2               j += 1
    47     21.4 MiB      0.0 MiB           2               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          12       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           9           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           6               j += 1
    47     21.4 MiB      0.0 MiB           6               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          20       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          16           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          12               j += 1
    47     21.4 MiB      0.0 MiB          12               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           3   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           3       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           3       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           3       if low >= high:
    40     21.4 MiB      0.0 MiB           2           return array
    41                                         
    42     21.4 MiB      0.0 MiB           1       pivot = array[high]
    43     21.4 MiB      0.0 MiB           1       j = low-1
    44     21.4 MiB      0.0 MiB           2       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           1           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           1               j += 1
    47     21.4 MiB      0.0 MiB           1               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           1       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           1       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           1       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           5   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           5       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           5       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           5       if low >= high:
    40     21.4 MiB      0.0 MiB           3           return array
    41                                         
    42     21.4 MiB      0.0 MiB           2       pivot = array[high]
    43     21.4 MiB      0.0 MiB           2       j = low-1
    44     21.4 MiB      0.0 MiB           6       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           4           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           2               j += 1
    47     21.4 MiB      0.0 MiB           2               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           2       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           2       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           2       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           7   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           7       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           7       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           7       if low >= high:
    40     21.4 MiB      0.0 MiB           4           return array
    41                                         
    42     21.4 MiB      0.0 MiB           3       pivot = array[high]
    43     21.4 MiB      0.0 MiB           3       j = low-1
    44     21.4 MiB      0.0 MiB          12       for i in range(low, high):
    45     21.4 MiB      0.0 MiB           9           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           6               j += 1
    47     21.4 MiB      0.0 MiB           6               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           3       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           3       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           3       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           9   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           9       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           9       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           9       if low >= high:
    40     21.4 MiB      0.0 MiB           5           return array
    41                                         
    42     21.4 MiB      0.0 MiB           4       pivot = array[high]
    43     21.4 MiB      0.0 MiB           4       j = low-1
    44     21.4 MiB      0.0 MiB          19       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          15           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB           6               j += 1
    47     21.4 MiB      0.0 MiB           6               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           4       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           4       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           4       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB           1   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB           1       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB           1       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB           1       if low >= high:
    40     21.4 MiB      0.0 MiB           1           return array
    41                                         
    42                                             pivot = array[high]
    43                                             j = low-1
    44                                             for i in range(low, high):
    45                                                 if array[i] <= pivot:
    46                                                     j += 1
    47                                                     array[i], array[j] = array[j], array[i]
    48                                             array[high], array[j+1] = array[j+1], array[high]
    49                                             quicksort_inplace(array, low, j)
    50                                             quicksort_inplace(array, j+2, high)
    51                                             return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          11   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          11       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          11       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          11       if low >= high:
    40     21.4 MiB      0.0 MiB           6           return array
    41                                         
    42     21.4 MiB      0.0 MiB           5       pivot = array[high]
    43     21.4 MiB      0.0 MiB           5       j = low-1
    44     21.4 MiB      0.0 MiB          27       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          22           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          13               j += 1
    47     21.4 MiB      0.0 MiB          13               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB           5       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB           5       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB           5       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB           5       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          21   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          21       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          21       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          21       if low >= high:
    40     21.4 MiB      0.0 MiB          11           return array
    41                                         
    42     21.4 MiB      0.0 MiB          10       pivot = array[high]
    43     21.4 MiB      0.0 MiB          10       j = low-1
    44     21.4 MiB      0.0 MiB          64       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          54           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          33               j += 1
    47     21.4 MiB      0.0 MiB          33               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          10       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          10       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          10       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          10       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB          25   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB          25       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB          25       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB          25       if low >= high:
    40     21.4 MiB      0.0 MiB          13           return array
    41                                         
    42     21.4 MiB      0.0 MiB          12       pivot = array[high]
    43     21.4 MiB      0.0 MiB          12       j = low-1
    44     21.4 MiB      0.0 MiB          88       for i in range(low, high):
    45     21.4 MiB      0.0 MiB          76           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB          37               j += 1
    47     21.4 MiB      0.0 MiB          37               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          12       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          12       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          12       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          12       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB         125   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB         125       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB         125       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB         125       if low >= high:
    40     21.4 MiB      0.0 MiB          63           return array
    41                                         
    42     21.4 MiB      0.0 MiB          62       pivot = array[high]
    43     21.4 MiB      0.0 MiB          62       j = low-1
    44     21.4 MiB      0.0 MiB         789       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         727           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         424               j += 1
    47     21.4 MiB      0.0 MiB         424               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          62       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          62       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          62       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          62       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB         145   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB         145       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB         145       if high is None:
    38                                                 high = len(array)-1
    39     21.4 MiB      0.0 MiB         145       if low >= high:
    40     21.4 MiB      0.0 MiB          73           return array
    41                                         
    42     21.4 MiB      0.0 MiB          72       pivot = array[high]
    43     21.4 MiB      0.0 MiB          72       j = low-1
    44     21.4 MiB      0.0 MiB         977       for i in range(low, high):
    45     21.4 MiB      0.0 MiB         905           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         459               j += 1
    47     21.4 MiB      0.0 MiB         459               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          72       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          72       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          72       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          72       return array


Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    33     21.4 MiB     21.4 MiB         181   @profile
    34                                         def quicksort_inplace(array, low=0, high=None):
    35     21.4 MiB      0.0 MiB         181       if len(array) <= 1:
    36                                                 return array
    37     21.4 MiB      0.0 MiB         181       if high is None:
    38     21.4 MiB      0.0 MiB           1           high = len(array)-1
    39     21.4 MiB      0.0 MiB         181       if low >= high:
    40     21.4 MiB      0.0 MiB          91           return array
    41                                         
    42     21.4 MiB      0.0 MiB          90       pivot = array[high]
    43     21.4 MiB      0.0 MiB          90       j = low-1
    44     21.4 MiB      0.0 MiB        1250       for i in range(low, high):
    45     21.4 MiB      0.0 MiB        1160           if array[i] <= pivot:
    46     21.4 MiB      0.0 MiB         553               j += 1
    47     21.4 MiB      0.0 MiB         553               array[i], array[j] = array[j], array[i]
    48     21.4 MiB      0.0 MiB          90       array[high], array[j+1] = array[j+1], array[high]
    49     21.4 MiB      0.0 MiB          90       quicksort_inplace(array, low, j)
    50     21.4 MiB      0.0 MiB          90       quicksort_inplace(array, j+2, high)
    51     21.4 MiB      0.0 MiB          90       return array


Profiling insertionsort:
Filename: sorts.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    12     21.4 MiB     21.4 MiB           1   @profile
    13                                         def insertionsort(array):
    14                                         
    15     21.4 MiB      0.0 MiB         193       for i in range(len(array)):
    16     21.4 MiB      0.0 MiB         192           j = i-1
    17     21.4 MiB      0.0 MiB         192           v = array[i]
    18     21.4 MiB      0.0 MiB        9368           while j >= 0 and v < array[j]:
    19     21.4 MiB      0.0 MiB        9176               array[j+1] = array[j]
    20     21.4 MiB      0.0 MiB        9176               j -= 1
    21     21.4 MiB      0.0 MiB         192           array[j+1] = v
    22     21.4 MiB      0.0 MiB           1       return array


