#lang simply-scheme

;understanding:
;accumulate list of lists in a list

;strategy:
;enumerate - elements of lol
;filter - void, null?
;map - cars, cdrs
;accumulate +, 0

;implimentation
(define (new-accumulate op init seq)
  (if (null? seq)
      init
      (op (car seq)
          (new-accumulate op init (cdr seq)))))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      null
      (cons (new-accumulate op init (map(lambda(x)(car x)) seqs))
            (accumulate-n op init (map(lambda(x)(cdr x))seqs)))))




;evaluation 
(define lol
  '((1 2 3)(4 5 6)(7 8 9)(10 11 12)))



;2.37
;understanding:...


;strategy:
;a
;123 2
;123 4 
;123 6

;1 * 2, 2 * 4, 3 * 6
;
;
;
;b

;c
;'((1 2 3 4)
;  (1 2 3 4))
;'((1 1)(2 2)(3 3)(4 4))
;implimentation
(define (dot-product v w)
  (accumulate + (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda(r)(dot-product v r))m))


(define (transpose mat)
  (accumulate-n cons '() mat))

(define m1
  '((1 2 3 4)
    (1 2 3 4)
    (1 2 3 4)))



