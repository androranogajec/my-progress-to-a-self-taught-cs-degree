#lang simply-scheme

(define (square x)(* x x))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (regular-expt b n)
  (if (= n 0)
      1
      (* b (regular-expt b (- n 1)))))
;1.16
(define (iterative-expt b n)
  (define (iter a b n)
    (cond
      ((= n 0) a)
      ((even? n) (iter a (* b b) (/ n 2)))
      (else (iter (* a b) b (- n 1)))))
  (iter 1 b n))


;this is some duplicate from week 2, I needed this code i.e 1.46 part 2
; 1.35
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (golden-ratio-formula phi)
  (+ 1 (/ 1 phi)))

(define (golden-ratio guess)
  (fixed-point golden-ratio-formula guess))


; (golden-ratio 10.0)

;1.37
;about 11 recursive calls to get to 4 decimal places of the actual golden ratio 

;recursive definition
(define (cont-frac-rec n d k)
  (if (= k 0)
      0
      (/ (n k)(+ (d k) (cont-frac-rec n d (- k 1))))))

;(trace cont-frac-rec)
;(cont-frac-rec (lambda(i)1.0)(lambda(i)1.0) 11)

(define (cont-frac-iter n d k a)
  (if (= k 0)
      a
      (cont-frac-iter n d (- k 1) (/ (n k)(+ (d k) a )))))

;(cont-frac-iter (lambda(i)1.0)(lambda(i)1.0) 11 1.0)

;1.38
;1 2  1 1 4  1 1 6  1 1 8  1 1 10  1 1 12  1 1 14...
;0 1  2 3 4  5 6 7  8 9 10 111213  141516
;         -0     -1     -2     -3      -4
;         /2      /2    /2     /2      /2

(define (euler-d i a)
  (if (or (= (remainder i 3) 1)(= i 1))
      (* a 2)
      1))
(euler-d 4 2)


